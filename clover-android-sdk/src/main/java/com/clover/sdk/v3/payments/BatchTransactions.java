/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payments;


import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getPaymentIds paymentIds}</li>
 * <li>{@link #getRefundIds refundIds}</li>
 * <li>{@link #getCreditIds creditIds}</li>
 * <li>{@link #getPaymentDBIds paymentDBIds}</li>
 * <li>{@link #getRefundDBIds refundDBIds}</li>
 * <li>{@link #getCreditDBIds creditDBIds}</li>
 * <li>{@link #getPaymentInfo paymentInfo}</li>
 * <li>{@link #getRefundInfo refundInfo}</li>
 * <li>{@link #getCreditInfo creditInfo}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class BatchTransactions extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * List of payments in the batch
   */
  public java.util.List<String> getPaymentIds() {
    return genClient.cacheGet(CacheKey.paymentIds);
  }

  /**
   * List of refunds in the batch
   */
  public java.util.List<String> getRefundIds() {
    return genClient.cacheGet(CacheKey.refundIds);
  }

  /**
   * List of credits in the batch
   */
  public java.util.List<String> getCreditIds() {
    return genClient.cacheGet(CacheKey.creditIds);
  }

  /**
   * List of payment database ids in the batch
   */
  public java.util.List<Long> getPaymentDBIds() {
    return genClient.cacheGet(CacheKey.paymentDBIds);
  }

  /**
   * List of refundsIDs in the batch
   */
  public java.util.List<Long> getRefundDBIds() {
    return genClient.cacheGet(CacheKey.refundDBIds);
  }

  /**
   * List of creditsIDs in the batch
   */
  public java.util.List<Long> getCreditDBIds() {
    return genClient.cacheGet(CacheKey.creditDBIds);
  }

  /**
   * List of payments transactions info in the batch
   */
  public java.util.List<BatchTransactionDetails> getPaymentInfo() {
    return genClient.cacheGet(CacheKey.paymentInfo);
  }

  /**
   * List of refunds transactions info in the batch
   */
  public java.util.List<BatchTransactionDetails> getRefundInfo() {
    return genClient.cacheGet(CacheKey.refundInfo);
  }

  /**
   * List of credits transactions info in the batch
   */
  public java.util.List<BatchTransactionDetails> getCreditInfo() {
    return genClient.cacheGet(CacheKey.creditInfo);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    paymentIds
        (com.clover.sdk.extractors.BasicListExtractionStrategy.instance(String.class)),
    refundIds
        (com.clover.sdk.extractors.BasicListExtractionStrategy.instance(String.class)),
    creditIds
        (com.clover.sdk.extractors.BasicListExtractionStrategy.instance(String.class)),
    paymentDBIds
        (com.clover.sdk.extractors.BasicListExtractionStrategy.instance(Long.class)),
    refundDBIds
        (com.clover.sdk.extractors.BasicListExtractionStrategy.instance(Long.class)),
    creditDBIds
        (com.clover.sdk.extractors.BasicListExtractionStrategy.instance(Long.class)),
    paymentInfo
        (com.clover.sdk.extractors.RecordListExtractionStrategy.instance(BatchTransactionDetails.JSON_CREATOR)),
    refundInfo
        (com.clover.sdk.extractors.RecordListExtractionStrategy.instance(BatchTransactionDetails.JSON_CREATOR)),
    creditInfo
        (com.clover.sdk.extractors.RecordListExtractionStrategy.instance(BatchTransactionDetails.JSON_CREATOR)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<BatchTransactions> genClient;

  /**
   * Constructs a new empty instance.
   */
  public BatchTransactions() {
    genClient = new GenericClient<BatchTransactions>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected BatchTransactions(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public BatchTransactions(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public BatchTransactions(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public BatchTransactions(BatchTransactions src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'paymentIds' field is set and is not null */
  public boolean isNotNullPaymentIds() {
    return genClient.cacheValueIsNotNull(CacheKey.paymentIds);
  }

  /** Checks whether the 'paymentIds' field is set and is not null and is not empty */
  public boolean isNotEmptyPaymentIds() { return isNotNullPaymentIds() && !getPaymentIds().isEmpty(); }

  /** Checks whether the 'refundIds' field is set and is not null */
  public boolean isNotNullRefundIds() {
    return genClient.cacheValueIsNotNull(CacheKey.refundIds);
  }

  /** Checks whether the 'refundIds' field is set and is not null and is not empty */
  public boolean isNotEmptyRefundIds() { return isNotNullRefundIds() && !getRefundIds().isEmpty(); }

  /** Checks whether the 'creditIds' field is set and is not null */
  public boolean isNotNullCreditIds() {
    return genClient.cacheValueIsNotNull(CacheKey.creditIds);
  }

  /** Checks whether the 'creditIds' field is set and is not null and is not empty */
  public boolean isNotEmptyCreditIds() { return isNotNullCreditIds() && !getCreditIds().isEmpty(); }

  /** Checks whether the 'paymentDBIds' field is set and is not null */
  public boolean isNotNullPaymentDBIds() {
    return genClient.cacheValueIsNotNull(CacheKey.paymentDBIds);
  }

  /** Checks whether the 'paymentDBIds' field is set and is not null and is not empty */
  public boolean isNotEmptyPaymentDBIds() { return isNotNullPaymentDBIds() && !getPaymentDBIds().isEmpty(); }

  /** Checks whether the 'refundDBIds' field is set and is not null */
  public boolean isNotNullRefundDBIds() {
    return genClient.cacheValueIsNotNull(CacheKey.refundDBIds);
  }

  /** Checks whether the 'refundDBIds' field is set and is not null and is not empty */
  public boolean isNotEmptyRefundDBIds() { return isNotNullRefundDBIds() && !getRefundDBIds().isEmpty(); }

  /** Checks whether the 'creditDBIds' field is set and is not null */
  public boolean isNotNullCreditDBIds() {
    return genClient.cacheValueIsNotNull(CacheKey.creditDBIds);
  }

  /** Checks whether the 'creditDBIds' field is set and is not null and is not empty */
  public boolean isNotEmptyCreditDBIds() { return isNotNullCreditDBIds() && !getCreditDBIds().isEmpty(); }

  /** Checks whether the 'paymentInfo' field is set and is not null */
  public boolean isNotNullPaymentInfo() {
    return genClient.cacheValueIsNotNull(CacheKey.paymentInfo);
  }

  /** Checks whether the 'paymentInfo' field is set and is not null and is not empty */
  public boolean isNotEmptyPaymentInfo() { return isNotNullPaymentInfo() && !getPaymentInfo().isEmpty(); }

  /** Checks whether the 'refundInfo' field is set and is not null */
  public boolean isNotNullRefundInfo() {
    return genClient.cacheValueIsNotNull(CacheKey.refundInfo);
  }

  /** Checks whether the 'refundInfo' field is set and is not null and is not empty */
  public boolean isNotEmptyRefundInfo() { return isNotNullRefundInfo() && !getRefundInfo().isEmpty(); }

  /** Checks whether the 'creditInfo' field is set and is not null */
  public boolean isNotNullCreditInfo() {
    return genClient.cacheValueIsNotNull(CacheKey.creditInfo);
  }

  /** Checks whether the 'creditInfo' field is set and is not null and is not empty */
  public boolean isNotEmptyCreditInfo() { return isNotNullCreditInfo() && !getCreditInfo().isEmpty(); }



  /** Checks whether the 'paymentIds' field has been set, however the value could be null */
  public boolean hasPaymentIds() {
    return genClient.cacheHasKey(CacheKey.paymentIds);
  }

  /** Checks whether the 'refundIds' field has been set, however the value could be null */
  public boolean hasRefundIds() {
    return genClient.cacheHasKey(CacheKey.refundIds);
  }

  /** Checks whether the 'creditIds' field has been set, however the value could be null */
  public boolean hasCreditIds() {
    return genClient.cacheHasKey(CacheKey.creditIds);
  }

  /** Checks whether the 'paymentDBIds' field has been set, however the value could be null */
  public boolean hasPaymentDBIds() {
    return genClient.cacheHasKey(CacheKey.paymentDBIds);
  }

  /** Checks whether the 'refundDBIds' field has been set, however the value could be null */
  public boolean hasRefundDBIds() {
    return genClient.cacheHasKey(CacheKey.refundDBIds);
  }

  /** Checks whether the 'creditDBIds' field has been set, however the value could be null */
  public boolean hasCreditDBIds() {
    return genClient.cacheHasKey(CacheKey.creditDBIds);
  }

  /** Checks whether the 'paymentInfo' field has been set, however the value could be null */
  public boolean hasPaymentInfo() {
    return genClient.cacheHasKey(CacheKey.paymentInfo);
  }

  /** Checks whether the 'refundInfo' field has been set, however the value could be null */
  public boolean hasRefundInfo() {
    return genClient.cacheHasKey(CacheKey.refundInfo);
  }

  /** Checks whether the 'creditInfo' field has been set, however the value could be null */
  public boolean hasCreditInfo() {
    return genClient.cacheHasKey(CacheKey.creditInfo);
  }


  /**
   * Sets the field 'paymentIds'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setPaymentIds(java.util.List<String> paymentIds) {
    return genClient.setArrayOther(paymentIds, CacheKey.paymentIds);
  }

  /**
   * Sets the field 'refundIds'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setRefundIds(java.util.List<String> refundIds) {
    return genClient.setArrayOther(refundIds, CacheKey.refundIds);
  }

  /**
   * Sets the field 'creditIds'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setCreditIds(java.util.List<String> creditIds) {
    return genClient.setArrayOther(creditIds, CacheKey.creditIds);
  }

  /**
   * Sets the field 'paymentDBIds'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setPaymentDBIds(java.util.List<Long> paymentDBIds) {
    return genClient.setArrayOther(paymentDBIds, CacheKey.paymentDBIds);
  }

  /**
   * Sets the field 'refundDBIds'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setRefundDBIds(java.util.List<Long> refundDBIds) {
    return genClient.setArrayOther(refundDBIds, CacheKey.refundDBIds);
  }

  /**
   * Sets the field 'creditDBIds'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setCreditDBIds(java.util.List<Long> creditDBIds) {
    return genClient.setArrayOther(creditDBIds, CacheKey.creditDBIds);
  }

  /**
   * Sets the field 'paymentInfo'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setPaymentInfo(java.util.List<BatchTransactionDetails> paymentInfo) {
    return genClient.setArrayRecord(paymentInfo, CacheKey.paymentInfo);
  }

  /**
   * Sets the field 'refundInfo'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setRefundInfo(java.util.List<BatchTransactionDetails> refundInfo) {
    return genClient.setArrayRecord(refundInfo, CacheKey.refundInfo);
  }

  /**
   * Sets the field 'creditInfo'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public BatchTransactions setCreditInfo(java.util.List<BatchTransactionDetails> creditInfo) {
    return genClient.setArrayRecord(creditInfo, CacheKey.creditInfo);
  }


  /** Clears the 'paymentIds' field, the 'has' method for this field will now return false */
  public void clearPaymentIds() {
    genClient.clear(CacheKey.paymentIds);
  }
  /** Clears the 'refundIds' field, the 'has' method for this field will now return false */
  public void clearRefundIds() {
    genClient.clear(CacheKey.refundIds);
  }
  /** Clears the 'creditIds' field, the 'has' method for this field will now return false */
  public void clearCreditIds() {
    genClient.clear(CacheKey.creditIds);
  }
  /** Clears the 'paymentDBIds' field, the 'has' method for this field will now return false */
  public void clearPaymentDBIds() {
    genClient.clear(CacheKey.paymentDBIds);
  }
  /** Clears the 'refundDBIds' field, the 'has' method for this field will now return false */
  public void clearRefundDBIds() {
    genClient.clear(CacheKey.refundDBIds);
  }
  /** Clears the 'creditDBIds' field, the 'has' method for this field will now return false */
  public void clearCreditDBIds() {
    genClient.clear(CacheKey.creditDBIds);
  }
  /** Clears the 'paymentInfo' field, the 'has' method for this field will now return false */
  public void clearPaymentInfo() {
    genClient.clear(CacheKey.paymentInfo);
  }
  /** Clears the 'refundInfo' field, the 'has' method for this field will now return false */
  public void clearRefundInfo() {
    genClient.clear(CacheKey.refundInfo);
  }
  /** Clears the 'creditInfo' field, the 'has' method for this field will now return false */
  public void clearCreditInfo() {
    genClient.clear(CacheKey.creditInfo);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public BatchTransactions copyChanges() {
    BatchTransactions copy = new BatchTransactions();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(BatchTransactions src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new BatchTransactions(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<BatchTransactions> CREATOR = new android.os.Parcelable.Creator<BatchTransactions>() {
    @Override
    public BatchTransactions createFromParcel(android.os.Parcel in) {
      BatchTransactions instance = new BatchTransactions(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public BatchTransactions[] newArray(int size) {
      return new BatchTransactions[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<BatchTransactions> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<BatchTransactions>() {
    public Class<BatchTransactions> getCreatedClass() {
      return BatchTransactions.class;
    }

    @Override
    public BatchTransactions create(org.json.JSONObject jsonObject) {
      return new BatchTransactions(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean PAYMENTIDS_IS_REQUIRED = false;
    public static final boolean REFUNDIDS_IS_REQUIRED = false;
    public static final boolean CREDITIDS_IS_REQUIRED = false;
    public static final boolean PAYMENTDBIDS_IS_REQUIRED = false;
    public static final boolean REFUNDDBIDS_IS_REQUIRED = false;
    public static final boolean CREDITDBIDS_IS_REQUIRED = false;
    public static final boolean PAYMENTINFO_IS_REQUIRED = false;
    public static final boolean REFUNDINFO_IS_REQUIRED = false;
    public static final boolean CREDITINFO_IS_REQUIRED = false;
  }

}
