/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payments;


import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getTransactionUuid transactionUuid}</li>
 * <li>{@link #getTransactionType transactionType}</li>
 * <li>{@link #getAuthCode authCode}</li>
 * <li>{@link #getCardTypeWithLastFour cardTypeWithLastFour}</li>
 * <li>{@link #getTotalAmount totalAmount}</li>
 * <li>{@link #getTransactionDate transactionDate}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class BatchTransactionDetails extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Unique identifier
   */
  public String getTransactionUuid() {
    return genClient.cacheGet(CacheKey.transactionUuid);
  }

  public String getTransactionType() {
    return genClient.cacheGet(CacheKey.transactionType);
  }

  /**
   * The type of additional charge
   */
  public String getAuthCode() {
    return genClient.cacheGet(CacheKey.authCode);
  }

  /**
   * contains card type along with last 4 digits
   */
  public String getCardTypeWithLastFour() {
    return genClient.cacheGet(CacheKey.cardTypeWithLastFour);
  }

  public Long getTotalAmount() {
    return genClient.cacheGet(CacheKey.totalAmount);
  }

  public Long getTransactionDate() {
    return genClient.cacheGet(CacheKey.transactionDate);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    transactionUuid
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
    transactionType
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
    authCode
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
    cardTypeWithLastFour
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
    totalAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(Long.class)),
    transactionDate
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(Long.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<BatchTransactionDetails> genClient;

  /**
   * Constructs a new empty instance.
   */
  public BatchTransactionDetails() {
    genClient = new GenericClient<BatchTransactionDetails>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected BatchTransactionDetails(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public BatchTransactionDetails(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public BatchTransactionDetails(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public BatchTransactionDetails(BatchTransactionDetails src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
    genClient.validateCloverId(CacheKey.transactionUuid, getTransactionUuid());

    genClient.validateMin(CacheKey.totalAmount, getTotalAmount(), 0L);
  }

  /** Checks whether the 'transactionUuid' field is set and is not null */
  public boolean isNotNullTransactionUuid() {
    return genClient.cacheValueIsNotNull(CacheKey.transactionUuid);
  }

  /** Checks whether the 'transactionType' field is set and is not null */
  public boolean isNotNullTransactionType() {
    return genClient.cacheValueIsNotNull(CacheKey.transactionType);
  }

  /** Checks whether the 'authCode' field is set and is not null */
  public boolean isNotNullAuthCode() {
    return genClient.cacheValueIsNotNull(CacheKey.authCode);
  }

  /** Checks whether the 'cardTypeWithLastFour' field is set and is not null */
  public boolean isNotNullCardTypeWithLastFour() {
    return genClient.cacheValueIsNotNull(CacheKey.cardTypeWithLastFour);
  }

  /** Checks whether the 'totalAmount' field is set and is not null */
  public boolean isNotNullTotalAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.totalAmount);
  }

  /** Checks whether the 'transactionDate' field is set and is not null */
  public boolean isNotNullTransactionDate() {
    return genClient.cacheValueIsNotNull(CacheKey.transactionDate);
  }



  /** Checks whether the 'transactionUuid' field has been set, however the value could be null */
  public boolean hasTransactionUuid() {
    return genClient.cacheHasKey(CacheKey.transactionUuid);
  }

  /** Checks whether the 'transactionType' field has been set, however the value could be null */
  public boolean hasTransactionType() {
    return genClient.cacheHasKey(CacheKey.transactionType);
  }

  /** Checks whether the 'authCode' field has been set, however the value could be null */
  public boolean hasAuthCode() {
    return genClient.cacheHasKey(CacheKey.authCode);
  }

  /** Checks whether the 'cardTypeWithLastFour' field has been set, however the value could be null */
  public boolean hasCardTypeWithLastFour() {
    return genClient.cacheHasKey(CacheKey.cardTypeWithLastFour);
  }

  /** Checks whether the 'totalAmount' field has been set, however the value could be null */
  public boolean hasTotalAmount() {
    return genClient.cacheHasKey(CacheKey.totalAmount);
  }

  /** Checks whether the 'transactionDate' field has been set, however the value could be null */
  public boolean hasTransactionDate() {
    return genClient.cacheHasKey(CacheKey.transactionDate);
  }


  /**
   * Sets the field 'transactionUuid'.
   */
  public BatchTransactionDetails setTransactionUuid(String transactionUuid) {
    return genClient.setOther(transactionUuid, CacheKey.transactionUuid);
  }

  /**
   * Sets the field 'transactionType'.
   */
  public BatchTransactionDetails setTransactionType(String transactionType) {
    return genClient.setOther(transactionType, CacheKey.transactionType);
  }

  /**
   * Sets the field 'authCode'.
   */
  public BatchTransactionDetails setAuthCode(String authCode) {
    return genClient.setOther(authCode, CacheKey.authCode);
  }

  /**
   * Sets the field 'cardTypeWithLastFour'.
   */
  public BatchTransactionDetails setCardTypeWithLastFour(String cardTypeWithLastFour) {
    return genClient.setOther(cardTypeWithLastFour, CacheKey.cardTypeWithLastFour);
  }

  /**
   * Sets the field 'totalAmount'.
   */
  public BatchTransactionDetails setTotalAmount(Long totalAmount) {
    return genClient.setOther(totalAmount, CacheKey.totalAmount);
  }

  /**
   * Sets the field 'transactionDate'.
   */
  public BatchTransactionDetails setTransactionDate(Long transactionDate) {
    return genClient.setOther(transactionDate, CacheKey.transactionDate);
  }


  /** Clears the 'transactionUuid' field, the 'has' method for this field will now return false */
  public void clearTransactionUuid() {
    genClient.clear(CacheKey.transactionUuid);
  }
  /** Clears the 'transactionType' field, the 'has' method for this field will now return false */
  public void clearTransactionType() {
    genClient.clear(CacheKey.transactionType);
  }
  /** Clears the 'authCode' field, the 'has' method for this field will now return false */
  public void clearAuthCode() {
    genClient.clear(CacheKey.authCode);
  }
  /** Clears the 'cardTypeWithLastFour' field, the 'has' method for this field will now return false */
  public void clearCardTypeWithLastFour() {
    genClient.clear(CacheKey.cardTypeWithLastFour);
  }
  /** Clears the 'totalAmount' field, the 'has' method for this field will now return false */
  public void clearTotalAmount() {
    genClient.clear(CacheKey.totalAmount);
  }
  /** Clears the 'transactionDate' field, the 'has' method for this field will now return false */
  public void clearTransactionDate() {
    genClient.clear(CacheKey.transactionDate);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public BatchTransactionDetails copyChanges() {
    BatchTransactionDetails copy = new BatchTransactionDetails();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(BatchTransactionDetails src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new BatchTransactionDetails(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<BatchTransactionDetails> CREATOR = new android.os.Parcelable.Creator<BatchTransactionDetails>() {
    @Override
    public BatchTransactionDetails createFromParcel(android.os.Parcel in) {
      BatchTransactionDetails instance = new BatchTransactionDetails(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public BatchTransactionDetails[] newArray(int size) {
      return new BatchTransactionDetails[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<BatchTransactionDetails> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<BatchTransactionDetails>() {
    public Class<BatchTransactionDetails> getCreatedClass() {
      return BatchTransactionDetails.class;
    }

    @Override
    public BatchTransactionDetails create(org.json.JSONObject jsonObject) {
      return new BatchTransactionDetails(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean TRANSACTIONUUID_IS_REQUIRED = false;
    public static final long TRANSACTIONUUID_MAX_LEN = 13;
    public static final boolean TRANSACTIONTYPE_IS_REQUIRED = false;
    public static final boolean AUTHCODE_IS_REQUIRED = false;
    public static final boolean CARDTYPEWITHLASTFOUR_IS_REQUIRED = false;
    public static final boolean TOTALAMOUNT_IS_REQUIRED = false;
    public static final long TOTALAMOUNT_MIN = 0;
    public static final boolean TRANSACTIONDATE_IS_REQUIRED = false;
  }

}
