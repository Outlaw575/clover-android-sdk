/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.billing;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getDeviceType deviceType}</li>
 * <li>{@link #getPlanActionType planActionType}</li>
 * <li>{@link #getFeeCategory feeCategory}</li>
 * <li>{@link #getFeeCode feeCode}</li>
 * <li>{@link #getCurrency currency}</li>
 * <li>{@link #getShortDesc shortDesc}</li>
 * <li>{@link #getFullDesc fullDesc}</li>
 * <li>{@link #getPerItemAmount perItemAmount}</li>
 * <li>{@link #getPercentage percentage}</li>
 * <li>{@link #getTotalTaxAmount totalTaxAmount}</li>
 * <li>{@link #getTax1Amount tax1Amount}</li>
 * <li>{@link #getTax2Amount tax2Amount}</li>
 * <li>{@link #getTax3Amount tax3Amount}</li>
 * <li>{@link #getTax4Amount tax4Amount}</li>
 * <li>{@link #getTotalTaxRate totalTaxRate}</li>
 * <li>{@link #getTax1Rate tax1Rate}</li>
 * <li>{@link #getTax2Rate tax2Rate}</li>
 * <li>{@link #getTax3Rate tax3Rate}</li>
 * <li>{@link #getTax4Rate tax4Rate}</li>
 * <li>{@link #getTotalAmount totalAmount}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class PlanActionFeeRateSummary extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public java.lang.String getDeviceType() {
    return genClient.cacheGet(CacheKey.deviceType);
  }

  public java.lang.String getPlanActionType() {
    return genClient.cacheGet(CacheKey.planActionType);
  }

  public java.lang.String getFeeCategory() {
    return genClient.cacheGet(CacheKey.feeCategory);
  }

  public java.lang.String getFeeCode() {
    return genClient.cacheGet(CacheKey.feeCode);
  }

  public java.lang.String getCurrency() {
    return genClient.cacheGet(CacheKey.currency);
  }

  public java.lang.String getShortDesc() {
    return genClient.cacheGet(CacheKey.shortDesc);
  }

  public java.lang.String getFullDesc() {
    return genClient.cacheGet(CacheKey.fullDesc);
  }

  public java.lang.Double getPerItemAmount() {
    return genClient.cacheGet(CacheKey.perItemAmount);
  }

  public java.lang.Double getPercentage() {
    return genClient.cacheGet(CacheKey.percentage);
  }

  public java.lang.Double getTotalTaxAmount() {
    return genClient.cacheGet(CacheKey.totalTaxAmount);
  }

  public java.lang.Double getTax1Amount() {
    return genClient.cacheGet(CacheKey.tax1Amount);
  }

  public java.lang.Double getTax2Amount() {
    return genClient.cacheGet(CacheKey.tax2Amount);
  }

  public java.lang.Double getTax3Amount() {
    return genClient.cacheGet(CacheKey.tax3Amount);
  }

  public java.lang.Double getTax4Amount() {
    return genClient.cacheGet(CacheKey.tax4Amount);
  }

  public java.lang.Double getTotalTaxRate() {
    return genClient.cacheGet(CacheKey.totalTaxRate);
  }

  public java.lang.Double getTax1Rate() {
    return genClient.cacheGet(CacheKey.tax1Rate);
  }

  public java.lang.Double getTax2Rate() {
    return genClient.cacheGet(CacheKey.tax2Rate);
  }

  public java.lang.Double getTax3Rate() {
    return genClient.cacheGet(CacheKey.tax3Rate);
  }

  public java.lang.Double getTax4Rate() {
    return genClient.cacheGet(CacheKey.tax4Rate);
  }

  public java.lang.Double getTotalAmount() {
    return genClient.cacheGet(CacheKey.totalAmount);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    deviceType
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    planActionType
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    feeCategory
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    feeCode
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    currency
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    shortDesc
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    fullDesc
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    perItemAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    percentage
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    totalTaxAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax1Amount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax2Amount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax3Amount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax4Amount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    totalTaxRate
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax1Rate
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax2Rate
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax3Rate
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    tax4Rate
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
    totalAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Double.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<PlanActionFeeRateSummary> genClient;

  /**
   * Constructs a new empty instance.
   */
  public PlanActionFeeRateSummary() {
    genClient = new GenericClient<PlanActionFeeRateSummary>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected PlanActionFeeRateSummary(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public PlanActionFeeRateSummary(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public PlanActionFeeRateSummary(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public PlanActionFeeRateSummary(PlanActionFeeRateSummary src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'deviceType' field is set and is not null */
  public boolean isNotNullDeviceType() {
    return genClient.cacheValueIsNotNull(CacheKey.deviceType);
  }

  /** Checks whether the 'planActionType' field is set and is not null */
  public boolean isNotNullPlanActionType() {
    return genClient.cacheValueIsNotNull(CacheKey.planActionType);
  }

  /** Checks whether the 'feeCategory' field is set and is not null */
  public boolean isNotNullFeeCategory() {
    return genClient.cacheValueIsNotNull(CacheKey.feeCategory);
  }

  /** Checks whether the 'feeCode' field is set and is not null */
  public boolean isNotNullFeeCode() {
    return genClient.cacheValueIsNotNull(CacheKey.feeCode);
  }

  /** Checks whether the 'currency' field is set and is not null */
  public boolean isNotNullCurrency() {
    return genClient.cacheValueIsNotNull(CacheKey.currency);
  }

  /** Checks whether the 'shortDesc' field is set and is not null */
  public boolean isNotNullShortDesc() {
    return genClient.cacheValueIsNotNull(CacheKey.shortDesc);
  }

  /** Checks whether the 'fullDesc' field is set and is not null */
  public boolean isNotNullFullDesc() {
    return genClient.cacheValueIsNotNull(CacheKey.fullDesc);
  }

  /** Checks whether the 'perItemAmount' field is set and is not null */
  public boolean isNotNullPerItemAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.perItemAmount);
  }

  /** Checks whether the 'percentage' field is set and is not null */
  public boolean isNotNullPercentage() {
    return genClient.cacheValueIsNotNull(CacheKey.percentage);
  }

  /** Checks whether the 'totalTaxAmount' field is set and is not null */
  public boolean isNotNullTotalTaxAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.totalTaxAmount);
  }

  /** Checks whether the 'tax1Amount' field is set and is not null */
  public boolean isNotNullTax1Amount() {
    return genClient.cacheValueIsNotNull(CacheKey.tax1Amount);
  }

  /** Checks whether the 'tax2Amount' field is set and is not null */
  public boolean isNotNullTax2Amount() {
    return genClient.cacheValueIsNotNull(CacheKey.tax2Amount);
  }

  /** Checks whether the 'tax3Amount' field is set and is not null */
  public boolean isNotNullTax3Amount() {
    return genClient.cacheValueIsNotNull(CacheKey.tax3Amount);
  }

  /** Checks whether the 'tax4Amount' field is set and is not null */
  public boolean isNotNullTax4Amount() {
    return genClient.cacheValueIsNotNull(CacheKey.tax4Amount);
  }

  /** Checks whether the 'totalTaxRate' field is set and is not null */
  public boolean isNotNullTotalTaxRate() {
    return genClient.cacheValueIsNotNull(CacheKey.totalTaxRate);
  }

  /** Checks whether the 'tax1Rate' field is set and is not null */
  public boolean isNotNullTax1Rate() {
    return genClient.cacheValueIsNotNull(CacheKey.tax1Rate);
  }

  /** Checks whether the 'tax2Rate' field is set and is not null */
  public boolean isNotNullTax2Rate() {
    return genClient.cacheValueIsNotNull(CacheKey.tax2Rate);
  }

  /** Checks whether the 'tax3Rate' field is set and is not null */
  public boolean isNotNullTax3Rate() {
    return genClient.cacheValueIsNotNull(CacheKey.tax3Rate);
  }

  /** Checks whether the 'tax4Rate' field is set and is not null */
  public boolean isNotNullTax4Rate() {
    return genClient.cacheValueIsNotNull(CacheKey.tax4Rate);
  }

  /** Checks whether the 'totalAmount' field is set and is not null */
  public boolean isNotNullTotalAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.totalAmount);
  }



  /** Checks whether the 'deviceType' field has been set, however the value could be null */
  public boolean hasDeviceType() {
    return genClient.cacheHasKey(CacheKey.deviceType);
  }

  /** Checks whether the 'planActionType' field has been set, however the value could be null */
  public boolean hasPlanActionType() {
    return genClient.cacheHasKey(CacheKey.planActionType);
  }

  /** Checks whether the 'feeCategory' field has been set, however the value could be null */
  public boolean hasFeeCategory() {
    return genClient.cacheHasKey(CacheKey.feeCategory);
  }

  /** Checks whether the 'feeCode' field has been set, however the value could be null */
  public boolean hasFeeCode() {
    return genClient.cacheHasKey(CacheKey.feeCode);
  }

  /** Checks whether the 'currency' field has been set, however the value could be null */
  public boolean hasCurrency() {
    return genClient.cacheHasKey(CacheKey.currency);
  }

  /** Checks whether the 'shortDesc' field has been set, however the value could be null */
  public boolean hasShortDesc() {
    return genClient.cacheHasKey(CacheKey.shortDesc);
  }

  /** Checks whether the 'fullDesc' field has been set, however the value could be null */
  public boolean hasFullDesc() {
    return genClient.cacheHasKey(CacheKey.fullDesc);
  }

  /** Checks whether the 'perItemAmount' field has been set, however the value could be null */
  public boolean hasPerItemAmount() {
    return genClient.cacheHasKey(CacheKey.perItemAmount);
  }

  /** Checks whether the 'percentage' field has been set, however the value could be null */
  public boolean hasPercentage() {
    return genClient.cacheHasKey(CacheKey.percentage);
  }

  /** Checks whether the 'totalTaxAmount' field has been set, however the value could be null */
  public boolean hasTotalTaxAmount() {
    return genClient.cacheHasKey(CacheKey.totalTaxAmount);
  }

  /** Checks whether the 'tax1Amount' field has been set, however the value could be null */
  public boolean hasTax1Amount() {
    return genClient.cacheHasKey(CacheKey.tax1Amount);
  }

  /** Checks whether the 'tax2Amount' field has been set, however the value could be null */
  public boolean hasTax2Amount() {
    return genClient.cacheHasKey(CacheKey.tax2Amount);
  }

  /** Checks whether the 'tax3Amount' field has been set, however the value could be null */
  public boolean hasTax3Amount() {
    return genClient.cacheHasKey(CacheKey.tax3Amount);
  }

  /** Checks whether the 'tax4Amount' field has been set, however the value could be null */
  public boolean hasTax4Amount() {
    return genClient.cacheHasKey(CacheKey.tax4Amount);
  }

  /** Checks whether the 'totalTaxRate' field has been set, however the value could be null */
  public boolean hasTotalTaxRate() {
    return genClient.cacheHasKey(CacheKey.totalTaxRate);
  }

  /** Checks whether the 'tax1Rate' field has been set, however the value could be null */
  public boolean hasTax1Rate() {
    return genClient.cacheHasKey(CacheKey.tax1Rate);
  }

  /** Checks whether the 'tax2Rate' field has been set, however the value could be null */
  public boolean hasTax2Rate() {
    return genClient.cacheHasKey(CacheKey.tax2Rate);
  }

  /** Checks whether the 'tax3Rate' field has been set, however the value could be null */
  public boolean hasTax3Rate() {
    return genClient.cacheHasKey(CacheKey.tax3Rate);
  }

  /** Checks whether the 'tax4Rate' field has been set, however the value could be null */
  public boolean hasTax4Rate() {
    return genClient.cacheHasKey(CacheKey.tax4Rate);
  }

  /** Checks whether the 'totalAmount' field has been set, however the value could be null */
  public boolean hasTotalAmount() {
    return genClient.cacheHasKey(CacheKey.totalAmount);
  }


  /**
   * Sets the field 'deviceType'.
   */
  public PlanActionFeeRateSummary setDeviceType(java.lang.String deviceType) {
    return genClient.setOther(deviceType, CacheKey.deviceType);
  }

  /**
   * Sets the field 'planActionType'.
   */
  public PlanActionFeeRateSummary setPlanActionType(java.lang.String planActionType) {
    return genClient.setOther(planActionType, CacheKey.planActionType);
  }

  /**
   * Sets the field 'feeCategory'.
   */
  public PlanActionFeeRateSummary setFeeCategory(java.lang.String feeCategory) {
    return genClient.setOther(feeCategory, CacheKey.feeCategory);
  }

  /**
   * Sets the field 'feeCode'.
   */
  public PlanActionFeeRateSummary setFeeCode(java.lang.String feeCode) {
    return genClient.setOther(feeCode, CacheKey.feeCode);
  }

  /**
   * Sets the field 'currency'.
   */
  public PlanActionFeeRateSummary setCurrency(java.lang.String currency) {
    return genClient.setOther(currency, CacheKey.currency);
  }

  /**
   * Sets the field 'shortDesc'.
   */
  public PlanActionFeeRateSummary setShortDesc(java.lang.String shortDesc) {
    return genClient.setOther(shortDesc, CacheKey.shortDesc);
  }

  /**
   * Sets the field 'fullDesc'.
   */
  public PlanActionFeeRateSummary setFullDesc(java.lang.String fullDesc) {
    return genClient.setOther(fullDesc, CacheKey.fullDesc);
  }

  /**
   * Sets the field 'perItemAmount'.
   */
  public PlanActionFeeRateSummary setPerItemAmount(java.lang.Double perItemAmount) {
    return genClient.setOther(perItemAmount, CacheKey.perItemAmount);
  }

  /**
   * Sets the field 'percentage'.
   */
  public PlanActionFeeRateSummary setPercentage(java.lang.Double percentage) {
    return genClient.setOther(percentage, CacheKey.percentage);
  }

  /**
   * Sets the field 'totalTaxAmount'.
   */
  public PlanActionFeeRateSummary setTotalTaxAmount(java.lang.Double totalTaxAmount) {
    return genClient.setOther(totalTaxAmount, CacheKey.totalTaxAmount);
  }

  /**
   * Sets the field 'tax1Amount'.
   */
  public PlanActionFeeRateSummary setTax1Amount(java.lang.Double tax1Amount) {
    return genClient.setOther(tax1Amount, CacheKey.tax1Amount);
  }

  /**
   * Sets the field 'tax2Amount'.
   */
  public PlanActionFeeRateSummary setTax2Amount(java.lang.Double tax2Amount) {
    return genClient.setOther(tax2Amount, CacheKey.tax2Amount);
  }

  /**
   * Sets the field 'tax3Amount'.
   */
  public PlanActionFeeRateSummary setTax3Amount(java.lang.Double tax3Amount) {
    return genClient.setOther(tax3Amount, CacheKey.tax3Amount);
  }

  /**
   * Sets the field 'tax4Amount'.
   */
  public PlanActionFeeRateSummary setTax4Amount(java.lang.Double tax4Amount) {
    return genClient.setOther(tax4Amount, CacheKey.tax4Amount);
  }

  /**
   * Sets the field 'totalTaxRate'.
   */
  public PlanActionFeeRateSummary setTotalTaxRate(java.lang.Double totalTaxRate) {
    return genClient.setOther(totalTaxRate, CacheKey.totalTaxRate);
  }

  /**
   * Sets the field 'tax1Rate'.
   */
  public PlanActionFeeRateSummary setTax1Rate(java.lang.Double tax1Rate) {
    return genClient.setOther(tax1Rate, CacheKey.tax1Rate);
  }

  /**
   * Sets the field 'tax2Rate'.
   */
  public PlanActionFeeRateSummary setTax2Rate(java.lang.Double tax2Rate) {
    return genClient.setOther(tax2Rate, CacheKey.tax2Rate);
  }

  /**
   * Sets the field 'tax3Rate'.
   */
  public PlanActionFeeRateSummary setTax3Rate(java.lang.Double tax3Rate) {
    return genClient.setOther(tax3Rate, CacheKey.tax3Rate);
  }

  /**
   * Sets the field 'tax4Rate'.
   */
  public PlanActionFeeRateSummary setTax4Rate(java.lang.Double tax4Rate) {
    return genClient.setOther(tax4Rate, CacheKey.tax4Rate);
  }

  /**
   * Sets the field 'totalAmount'.
   */
  public PlanActionFeeRateSummary setTotalAmount(java.lang.Double totalAmount) {
    return genClient.setOther(totalAmount, CacheKey.totalAmount);
  }


  /** Clears the 'deviceType' field, the 'has' method for this field will now return false */
  public void clearDeviceType() {
    genClient.clear(CacheKey.deviceType);
  }
  /** Clears the 'planActionType' field, the 'has' method for this field will now return false */
  public void clearPlanActionType() {
    genClient.clear(CacheKey.planActionType);
  }
  /** Clears the 'feeCategory' field, the 'has' method for this field will now return false */
  public void clearFeeCategory() {
    genClient.clear(CacheKey.feeCategory);
  }
  /** Clears the 'feeCode' field, the 'has' method for this field will now return false */
  public void clearFeeCode() {
    genClient.clear(CacheKey.feeCode);
  }
  /** Clears the 'currency' field, the 'has' method for this field will now return false */
  public void clearCurrency() {
    genClient.clear(CacheKey.currency);
  }
  /** Clears the 'shortDesc' field, the 'has' method for this field will now return false */
  public void clearShortDesc() {
    genClient.clear(CacheKey.shortDesc);
  }
  /** Clears the 'fullDesc' field, the 'has' method for this field will now return false */
  public void clearFullDesc() {
    genClient.clear(CacheKey.fullDesc);
  }
  /** Clears the 'perItemAmount' field, the 'has' method for this field will now return false */
  public void clearPerItemAmount() {
    genClient.clear(CacheKey.perItemAmount);
  }
  /** Clears the 'percentage' field, the 'has' method for this field will now return false */
  public void clearPercentage() {
    genClient.clear(CacheKey.percentage);
  }
  /** Clears the 'totalTaxAmount' field, the 'has' method for this field will now return false */
  public void clearTotalTaxAmount() {
    genClient.clear(CacheKey.totalTaxAmount);
  }
  /** Clears the 'tax1Amount' field, the 'has' method for this field will now return false */
  public void clearTax1Amount() {
    genClient.clear(CacheKey.tax1Amount);
  }
  /** Clears the 'tax2Amount' field, the 'has' method for this field will now return false */
  public void clearTax2Amount() {
    genClient.clear(CacheKey.tax2Amount);
  }
  /** Clears the 'tax3Amount' field, the 'has' method for this field will now return false */
  public void clearTax3Amount() {
    genClient.clear(CacheKey.tax3Amount);
  }
  /** Clears the 'tax4Amount' field, the 'has' method for this field will now return false */
  public void clearTax4Amount() {
    genClient.clear(CacheKey.tax4Amount);
  }
  /** Clears the 'totalTaxRate' field, the 'has' method for this field will now return false */
  public void clearTotalTaxRate() {
    genClient.clear(CacheKey.totalTaxRate);
  }
  /** Clears the 'tax1Rate' field, the 'has' method for this field will now return false */
  public void clearTax1Rate() {
    genClient.clear(CacheKey.tax1Rate);
  }
  /** Clears the 'tax2Rate' field, the 'has' method for this field will now return false */
  public void clearTax2Rate() {
    genClient.clear(CacheKey.tax2Rate);
  }
  /** Clears the 'tax3Rate' field, the 'has' method for this field will now return false */
  public void clearTax3Rate() {
    genClient.clear(CacheKey.tax3Rate);
  }
  /** Clears the 'tax4Rate' field, the 'has' method for this field will now return false */
  public void clearTax4Rate() {
    genClient.clear(CacheKey.tax4Rate);
  }
  /** Clears the 'totalAmount' field, the 'has' method for this field will now return false */
  public void clearTotalAmount() {
    genClient.clear(CacheKey.totalAmount);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public PlanActionFeeRateSummary copyChanges() {
    PlanActionFeeRateSummary copy = new PlanActionFeeRateSummary();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(PlanActionFeeRateSummary src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new PlanActionFeeRateSummary(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<PlanActionFeeRateSummary> CREATOR = new android.os.Parcelable.Creator<PlanActionFeeRateSummary>() {
    @Override
    public PlanActionFeeRateSummary createFromParcel(android.os.Parcel in) {
      PlanActionFeeRateSummary instance = new PlanActionFeeRateSummary(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public PlanActionFeeRateSummary[] newArray(int size) {
      return new PlanActionFeeRateSummary[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<PlanActionFeeRateSummary> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<PlanActionFeeRateSummary>() {
    public Class<PlanActionFeeRateSummary> getCreatedClass() {
      return PlanActionFeeRateSummary.class;
    }

    @Override
    public PlanActionFeeRateSummary create(org.json.JSONObject jsonObject) {
      return new PlanActionFeeRateSummary(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean DEVICETYPE_IS_REQUIRED = false;
    public static final boolean PLANACTIONTYPE_IS_REQUIRED = false;
    public static final boolean FEECATEGORY_IS_REQUIRED = false;
    public static final boolean FEECODE_IS_REQUIRED = false;
    public static final boolean CURRENCY_IS_REQUIRED = false;
    public static final boolean SHORTDESC_IS_REQUIRED = false;
    public static final boolean FULLDESC_IS_REQUIRED = false;
    public static final boolean PERITEMAMOUNT_IS_REQUIRED = false;
    public static final boolean PERCENTAGE_IS_REQUIRED = false;
    public static final boolean TOTALTAXAMOUNT_IS_REQUIRED = false;
    public static final boolean TAX1AMOUNT_IS_REQUIRED = false;
    public static final boolean TAX2AMOUNT_IS_REQUIRED = false;
    public static final boolean TAX3AMOUNT_IS_REQUIRED = false;
    public static final boolean TAX4AMOUNT_IS_REQUIRED = false;
    public static final boolean TOTALTAXRATE_IS_REQUIRED = false;
    public static final boolean TAX1RATE_IS_REQUIRED = false;
    public static final boolean TAX2RATE_IS_REQUIRED = false;
    public static final boolean TAX3RATE_IS_REQUIRED = false;
    public static final boolean TAX4RATE_IS_REQUIRED = false;
    public static final boolean TOTALAMOUNT_IS_REQUIRED = false;
  }

}
