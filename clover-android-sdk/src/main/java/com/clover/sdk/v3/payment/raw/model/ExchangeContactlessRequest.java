/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payment.raw.model;


import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getConfig config}</li>
 * <li>{@link #getData data}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class ExchangeContactlessRequest extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

    public String getConfig() {
        return genClient.cacheGet(CacheKey.config);
    }

    public String getData() {
        return genClient.cacheGet(CacheKey.data);
    }




    private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
        config
                (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
        data
                (com.clover.sdk.extractors.BasicExtractionStrategy.instance(String.class)),
        ;

        private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

        private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
            extractionStrategy = s;
        }

        @Override
        public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
            return extractionStrategy;
        }
    }

    private final GenericClient<ExchangeContactlessRequest> genClient;

    /**
     * Constructs a new empty instance.
     */
    public ExchangeContactlessRequest() {
        genClient = new GenericClient<ExchangeContactlessRequest>(this);
    }

    @Override
    protected GenericClient getGenericClient() {
        return genClient;
    }

    /**
     * Constructs a new empty instance.
     */
    protected ExchangeContactlessRequest(boolean noInit) {
        genClient = null;
    }

    /**
     * Constructs a new instance from the given JSON String.
     */
    public ExchangeContactlessRequest(String json) throws IllegalArgumentException {
        this();
        genClient.initJsonObject(json);
    }

    /**
     * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
     * reflected in this instance and vice-versa.
     */
    public ExchangeContactlessRequest(org.json.JSONObject jsonObject) {
        this();
        genClient.setJsonObject(jsonObject);
    }

    /**
     * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
     */
    public ExchangeContactlessRequest(ExchangeContactlessRequest src) {
        this();
        if (src.genClient.getJsonObject() != null) {
            genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
        }
    }

    /**
     * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
     * reflected in this instance and vice-versa.
     */
    public org.json.JSONObject getJSONObject() {
        return genClient.getJSONObject();
    }

    @Override
    public void validate() {
    }

    /** Checks whether the 'config' field is set and is not null */
    public boolean isNotNullConfig() {
        return genClient.cacheValueIsNotNull(CacheKey.config);
    }

    /** Checks whether the 'data' field is set and is not null */
    public boolean isNotNullData() {
        return genClient.cacheValueIsNotNull(CacheKey.data);
    }



    /** Checks whether the 'config' field has been set, however the value could be null */
    public boolean hasConfig() {
        return genClient.cacheHasKey(CacheKey.config);
    }

    /** Checks whether the 'data' field has been set, however the value could be null */
    public boolean hasData() {
        return genClient.cacheHasKey(CacheKey.data);
    }


    /**
     * Sets the field 'config'.
     */
    public ExchangeContactlessRequest setConfig(String config) {
        return genClient.setOther(config, CacheKey.config);
    }

    /**
     * Sets the field 'data'.
     */
    public ExchangeContactlessRequest setData(String data) {
        return genClient.setOther(data, CacheKey.data);
    }


    /** Clears the 'config' field, the 'has' method for this field will now return false */
    public void clearConfig() {
        genClient.clear(CacheKey.config);
    }
    /** Clears the 'data' field, the 'has' method for this field will now return false */
    public void clearData() {
        genClient.clear(CacheKey.data);
    }


    /**
     * Returns true if this instance has any changes.
     */
    public boolean containsChanges() {
        return genClient.containsChanges();
    }

    /**
     * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
     */
    public void resetChangeLog() {
        genClient.resetChangeLog();
    }

    /**
     * Create a copy of this instance that contains only fields that were set after the constructor was called.
     */
    public ExchangeContactlessRequest copyChanges() {
        ExchangeContactlessRequest copy = new ExchangeContactlessRequest();
        copy.mergeChanges(this);
        copy.resetChangeLog();
        return copy;
    }

    /**
     * Copy all the changed fields from the given source to this instance.
     */
    public void mergeChanges(ExchangeContactlessRequest src) {
        if (src.genClient.getChangeLog() != null) {
            genClient.mergeChanges(new ExchangeContactlessRequest(src).getJSONObject(), src.genClient);
        }
    }

    public static final android.os.Parcelable.Creator<ExchangeContactlessRequest> CREATOR = new android.os.Parcelable.Creator<ExchangeContactlessRequest>() {
        @Override
        public ExchangeContactlessRequest createFromParcel(android.os.Parcel in) {
            ExchangeContactlessRequest instance = new ExchangeContactlessRequest(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
            instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
            instance.genClient.setChangeLog(in.readBundle());
            return instance;
        }

        @Override
        public ExchangeContactlessRequest[] newArray(int size) {
            return new ExchangeContactlessRequest[size];
        }
    };

    public static final com.clover.sdk.JSONifiable.Creator<ExchangeContactlessRequest> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<ExchangeContactlessRequest>() {
        public Class<ExchangeContactlessRequest> getCreatedClass() {
            return ExchangeContactlessRequest.class;
        }

        @Override
        public ExchangeContactlessRequest create(org.json.JSONObject jsonObject) {
            return new ExchangeContactlessRequest(jsonObject);
        }
    };

    public interface Constraints {
        public static final boolean CONFIG_IS_REQUIRED = false;
        public static final boolean DATA_IS_REQUIRED = false;
    }

}
