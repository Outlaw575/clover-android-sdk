/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payment.raw.model;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getLabel label}</li>
 * <li>{@link #getIdentifier identifier}</li>
 * <li>{@link #getAidTerminal aidTerminal}</li>
 * <li>{@link #getTlvData tlvData}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class CardApplication extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Application label
   */
  public java.lang.String getLabel() {
    return genClient.cacheGet(CacheKey.label);
  }

  /**
   * Application AID (Card)
   */
  public java.lang.String getIdentifier() {
    return genClient.cacheGet(CacheKey.identifier);
  }

  /**
   * Application AID Terminal (9F06)
   */
  public java.lang.String getAidTerminal() {
    return genClient.cacheGet(CacheKey.aidTerminal);
  }

  /**
   * TLV Data
   */
  public java.lang.String getTlvData() {
    return genClient.cacheGet(CacheKey.tlvData);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    label
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    identifier
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    aidTerminal
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    tlvData
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<CardApplication> genClient;

  /**
   * Constructs a new empty instance.
   */
  public CardApplication() {
    genClient = new GenericClient<CardApplication>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected CardApplication(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public CardApplication(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public CardApplication(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public CardApplication(CardApplication src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'label' field is set and is not null */
  public boolean isNotNullLabel() {
    return genClient.cacheValueIsNotNull(CacheKey.label);
  }

  /** Checks whether the 'identifier' field is set and is not null */
  public boolean isNotNullIdentifier() {
    return genClient.cacheValueIsNotNull(CacheKey.identifier);
  }

  /** Checks whether the 'aidTerminal' field is set and is not null */
  public boolean isNotNullAidTerminal() {
    return genClient.cacheValueIsNotNull(CacheKey.aidTerminal);
  }

  /** Checks whether the 'tlvData' field is set and is not null */
  public boolean isNotNullTlvData() {
    return genClient.cacheValueIsNotNull(CacheKey.tlvData);
  }



  /** Checks whether the 'label' field has been set, however the value could be null */
  public boolean hasLabel() {
    return genClient.cacheHasKey(CacheKey.label);
  }

  /** Checks whether the 'identifier' field has been set, however the value could be null */
  public boolean hasIdentifier() {
    return genClient.cacheHasKey(CacheKey.identifier);
  }

  /** Checks whether the 'aidTerminal' field has been set, however the value could be null */
  public boolean hasAidTerminal() {
    return genClient.cacheHasKey(CacheKey.aidTerminal);
  }

  /** Checks whether the 'tlvData' field has been set, however the value could be null */
  public boolean hasTlvData() {
    return genClient.cacheHasKey(CacheKey.tlvData);
  }


  /**
   * Sets the field 'label'.
   */
  public CardApplication setLabel(java.lang.String label) {
    return genClient.setOther(label, CacheKey.label);
  }

  /**
   * Sets the field 'identifier'.
   */
  public CardApplication setIdentifier(java.lang.String identifier) {
    return genClient.setOther(identifier, CacheKey.identifier);
  }

  /**
   * Sets the field 'aidTerminal'.
   */
  public CardApplication setAidTerminal(java.lang.String aidTerminal) {
    return genClient.setOther(aidTerminal, CacheKey.aidTerminal);
  }

  /**
   * Sets the field 'tlvData'.
   */
  public CardApplication setTlvData(java.lang.String tlvData) {
    return genClient.setOther(tlvData, CacheKey.tlvData);
  }


  /** Clears the 'label' field, the 'has' method for this field will now return false */
  public void clearLabel() {
    genClient.clear(CacheKey.label);
  }
  /** Clears the 'identifier' field, the 'has' method for this field will now return false */
  public void clearIdentifier() {
    genClient.clear(CacheKey.identifier);
  }
  /** Clears the 'aidTerminal' field, the 'has' method for this field will now return false */
  public void clearAidTerminal() {
    genClient.clear(CacheKey.aidTerminal);
  }
  /** Clears the 'tlvData' field, the 'has' method for this field will now return false */
  public void clearTlvData() {
    genClient.clear(CacheKey.tlvData);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public CardApplication copyChanges() {
    CardApplication copy = new CardApplication();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(CardApplication src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new CardApplication(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<CardApplication> CREATOR = new android.os.Parcelable.Creator<CardApplication>() {
    @Override
    public CardApplication createFromParcel(android.os.Parcel in) {
      CardApplication instance = new CardApplication(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public CardApplication[] newArray(int size) {
      return new CardApplication[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<CardApplication> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<CardApplication>() {
    public Class<CardApplication> getCreatedClass() {
      return CardApplication.class;
    }

    @Override
    public CardApplication create(org.json.JSONObject jsonObject) {
      return new CardApplication(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean LABEL_IS_REQUIRED = false;
    public static final boolean IDENTIFIER_IS_REQUIRED = false;
    public static final boolean AIDTERMINAL_IS_REQUIRED = false;
    public static final boolean TLVDATA_IS_REQUIRED = false;
  }

}
