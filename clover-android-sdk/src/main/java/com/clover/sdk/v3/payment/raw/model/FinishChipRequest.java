/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payment.raw.model;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getOnlineResult onlineResult}</li>
 * <li>{@link #getAuthorizationResponseCode authorizationResponseCode}</li>
 * <li>{@link #getEmvData emvData}</li>
 * <li>{@link #getEmvTagList emvTagList}</li>
 * <li>{@link #getTimeout timeout}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class FinishChipRequest extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public com.clover.sdk.v3.payment.raw.model.OnlineResult getOnlineResult() {
    return genClient.cacheGet(CacheKey.onlineResult);
  }

  public java.lang.String getAuthorizationResponseCode() {
    return genClient.cacheGet(CacheKey.authorizationResponseCode);
  }

  public java.lang.String getEmvData() {
    return genClient.cacheGet(CacheKey.emvData);
  }

  public java.util.List<java.lang.String> getEmvTagList() {
    return genClient.cacheGet(CacheKey.emvTagList);
  }

  public java.lang.Long getTimeout() {
    return genClient.cacheGet(CacheKey.timeout);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    onlineResult
        (com.clover.sdk.extractors.EnumExtractionStrategy.instance(com.clover.sdk.v3.payment.raw.model.OnlineResult.class)),
    authorizationResponseCode
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    emvData
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.String.class)),
    emvTagList
        (com.clover.sdk.extractors.BasicListExtractionStrategy.instance(java.lang.String.class)),
    timeout
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<FinishChipRequest> genClient;

  /**
   * Constructs a new empty instance.
   */
  public FinishChipRequest() {
    genClient = new GenericClient<FinishChipRequest>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected FinishChipRequest(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public FinishChipRequest(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public FinishChipRequest(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public FinishChipRequest(FinishChipRequest src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'onlineResult' field is set and is not null */
  public boolean isNotNullOnlineResult() {
    return genClient.cacheValueIsNotNull(CacheKey.onlineResult);
  }

  /** Checks whether the 'authorizationResponseCode' field is set and is not null */
  public boolean isNotNullAuthorizationResponseCode() {
    return genClient.cacheValueIsNotNull(CacheKey.authorizationResponseCode);
  }

  /** Checks whether the 'emvData' field is set and is not null */
  public boolean isNotNullEmvData() {
    return genClient.cacheValueIsNotNull(CacheKey.emvData);
  }

  /** Checks whether the 'emvTagList' field is set and is not null */
  public boolean isNotNullEmvTagList() {
    return genClient.cacheValueIsNotNull(CacheKey.emvTagList);
  }

  /** Checks whether the 'emvTagList' field is set and is not null and is not empty */
  public boolean isNotEmptyEmvTagList() { return isNotNullEmvTagList() && !getEmvTagList().isEmpty(); }

  /** Checks whether the 'timeout' field is set and is not null */
  public boolean isNotNullTimeout() {
    return genClient.cacheValueIsNotNull(CacheKey.timeout);
  }



  /** Checks whether the 'onlineResult' field has been set, however the value could be null */
  public boolean hasOnlineResult() {
    return genClient.cacheHasKey(CacheKey.onlineResult);
  }

  /** Checks whether the 'authorizationResponseCode' field has been set, however the value could be null */
  public boolean hasAuthorizationResponseCode() {
    return genClient.cacheHasKey(CacheKey.authorizationResponseCode);
  }

  /** Checks whether the 'emvData' field has been set, however the value could be null */
  public boolean hasEmvData() {
    return genClient.cacheHasKey(CacheKey.emvData);
  }

  /** Checks whether the 'emvTagList' field has been set, however the value could be null */
  public boolean hasEmvTagList() {
    return genClient.cacheHasKey(CacheKey.emvTagList);
  }

  /** Checks whether the 'timeout' field has been set, however the value could be null */
  public boolean hasTimeout() {
    return genClient.cacheHasKey(CacheKey.timeout);
  }


  /**
   * Sets the field 'onlineResult'.
   */
  public FinishChipRequest setOnlineResult(com.clover.sdk.v3.payment.raw.model.OnlineResult onlineResult) {
    return genClient.setOther(onlineResult, CacheKey.onlineResult);
  }

  /**
   * Sets the field 'authorizationResponseCode'.
   */
  public FinishChipRequest setAuthorizationResponseCode(java.lang.String authorizationResponseCode) {
    return genClient.setOther(authorizationResponseCode, CacheKey.authorizationResponseCode);
  }

  /**
   * Sets the field 'emvData'.
   */
  public FinishChipRequest setEmvData(java.lang.String emvData) {
    return genClient.setOther(emvData, CacheKey.emvData);
  }

  /**
   * Sets the field 'emvTagList'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public FinishChipRequest setEmvTagList(java.util.List<java.lang.String> emvTagList) {
    return genClient.setArrayOther(emvTagList, CacheKey.emvTagList);
  }

  /**
   * Sets the field 'timeout'.
   */
  public FinishChipRequest setTimeout(java.lang.Long timeout) {
    return genClient.setOther(timeout, CacheKey.timeout);
  }


  /** Clears the 'onlineResult' field, the 'has' method for this field will now return false */
  public void clearOnlineResult() {
    genClient.clear(CacheKey.onlineResult);
  }
  /** Clears the 'authorizationResponseCode' field, the 'has' method for this field will now return false */
  public void clearAuthorizationResponseCode() {
    genClient.clear(CacheKey.authorizationResponseCode);
  }
  /** Clears the 'emvData' field, the 'has' method for this field will now return false */
  public void clearEmvData() {
    genClient.clear(CacheKey.emvData);
  }
  /** Clears the 'emvTagList' field, the 'has' method for this field will now return false */
  public void clearEmvTagList() {
    genClient.clear(CacheKey.emvTagList);
  }
  /** Clears the 'timeout' field, the 'has' method for this field will now return false */
  public void clearTimeout() {
    genClient.clear(CacheKey.timeout);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public FinishChipRequest copyChanges() {
    FinishChipRequest copy = new FinishChipRequest();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(FinishChipRequest src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new FinishChipRequest(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<FinishChipRequest> CREATOR = new android.os.Parcelable.Creator<FinishChipRequest>() {
    @Override
    public FinishChipRequest createFromParcel(android.os.Parcel in) {
      FinishChipRequest instance = new FinishChipRequest(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public FinishChipRequest[] newArray(int size) {
      return new FinishChipRequest[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<FinishChipRequest> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<FinishChipRequest>() {
    public Class<FinishChipRequest> getCreatedClass() {
      return FinishChipRequest.class;
    }

    @Override
    public FinishChipRequest create(org.json.JSONObject jsonObject) {
      return new FinishChipRequest(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean ONLINERESULT_IS_REQUIRED = false;
    public static final boolean AUTHORIZATIONRESPONSECODE_IS_REQUIRED = false;
    public static final boolean EMVDATA_IS_REQUIRED = false;
    public static final boolean EMVTAGLIST_IS_REQUIRED = false;
    public static final boolean TIMEOUT_IS_REQUIRED = false;
  }

}
