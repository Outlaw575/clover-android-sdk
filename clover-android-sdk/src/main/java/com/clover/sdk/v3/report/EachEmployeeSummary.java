/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
 * Copyright (C) 2019 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.report;


import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getVoids voids}</li>
 * <li>{@link #getNumVoids numVoids}</li>
 * <li>{@link #getGrossSales grossSales}</li>
 * <li>{@link #getRefundAmount refundAmount}</li>
 * <li>{@link #getRefundAmountTotal refundAmountTotal}</li>
 * <li>{@link #getPaymentAmount paymentAmount}</li>
 * <li>{@link #getNumRefunds numRefunds}</li>
 * <li>{@link #getRefundRepaymentAmount refundRepaymentAmount}</li>
 * <li>{@link #getNumDiscounts numDiscounts}</li>
 * <li>{@link #getDiscountAmount discountAmount}</li>
 * <li>{@link #getNet net}</li>
 * <li>{@link #getNonRevenueItems nonRevenueItems}</li>
 * <li>{@link #getGiftCardLoads giftCardLoads}</li>
 * <li>{@link #getTenderStats tenderStats}</li>
 * <li>{@link #getTipAmount tipAmount}</li>
 * <li>{@link #getCashTipsCollected cashTipsCollected}</li>
 * <li>{@link #getTipDetails tipDetails}</li>
 * <li>{@link #getTaxAmount taxAmount}</li>
 * <li>{@link #getTaxAmountCollected taxAmountCollected}</li>
 * <li>{@link #getServiceChargeAmount serviceChargeAmount}</li>
 * <li>{@link #getServiceChargeAmountCollected serviceChargeAmountCollected}</li>
 * <li>{@link #getAdditionalChargeAmount additionalChargeAmount}</li>
 * <li>{@link #getChargeDetails chargeDetails}</li>
 * <li>{@link #getAmountCollected amountCollected}</li>
 * <li>{@link #getAverageNetSales averageNetSales}</li>
 * <li>{@link #getExchangeAmount exchangeAmount}</li>
 * <li>{@link #getNumExchanges numExchanges}</li>
 * <li>{@link #getNumOrders numOrders}</li>
 * <li>{@link #getNumTransactions numTransactions}</li>
 * <li>{@link #getNumPayments numPayments}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class EachEmployeeSummary extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public java.lang.Long getVoids() {
    return genClient.cacheGet(CacheKey.voids);
  }

  public java.lang.Long getNumVoids() {
    return genClient.cacheGet(CacheKey.numVoids);
  }

  public java.lang.Long getGrossSales() {
    return genClient.cacheGet(CacheKey.grossSales);
  }

  /**
   * Total of all refunds and manual refunds excluding tip, service charge, and non-revenue items. Includes tax for VAT items, otherwise does not include tax. Reported as a negative number since it is subtracted from Gross Sales to arrive at Net Sales. Does not include refunds of overpayment.
   */
  public java.lang.Long getRefundAmount() {
    return genClient.cacheGet(CacheKey.refundAmount);
  }

  /**
   * Total of all refunds and manual refunds. Excludes tip. Includes tax, service charge, non-revenue items and refunds of overpayment. Reported as a negative number.
   */
  public java.lang.Long getRefundAmountTotal() {
    return genClient.cacheGet(CacheKey.refundAmountTotal);
  }

  /**
   * Total of all payments excluding tip, service charge, and non-revenue items. Includes tax for VAT items, otherwise does not include tax.
   */
  public java.lang.Long getPaymentAmount() {
    return genClient.cacheGet(CacheKey.paymentAmount);
  }

  public java.lang.Long getNumRefunds() {
    return genClient.cacheGet(CacheKey.numRefunds);
  }

  public java.lang.Long getRefundRepaymentAmount() {
    return genClient.cacheGet(CacheKey.refundRepaymentAmount);
  }

  public java.lang.Long getNumDiscounts() {
    return genClient.cacheGet(CacheKey.numDiscounts);
  }

  public java.lang.Long getDiscountAmount() {
    return genClient.cacheGet(CacheKey.discountAmount);
  }

  public java.lang.Long getNet() {
    return genClient.cacheGet(CacheKey.net);
  }

  public java.lang.Long getNonRevenueItems() {
    return genClient.cacheGet(CacheKey.nonRevenueItems);
  }

  public java.lang.Long getGiftCardLoads() {
    return genClient.cacheGet(CacheKey.giftCardLoads);
  }

  public java.util.List<com.clover.sdk.v3.report.TenderGroupRow> getTenderStats() {
    return genClient.cacheGet(CacheKey.tenderStats);
  }

  public java.lang.Long getTipAmount() {
    return genClient.cacheGet(CacheKey.tipAmount);
  }

  public java.lang.Long getCashTipsCollected() {
    return genClient.cacheGet(CacheKey.cashTipsCollected);
  }

  /**
   * Array of summary objects. Each row represents a possible type of tip that makes up the tipAmount field.
   */
  public java.util.List<com.clover.sdk.v3.report.Summary> getTipDetails() {
    return genClient.cacheGet(CacheKey.tipDetails);
  }

  public java.lang.Long getTaxAmount() {
    return genClient.cacheGet(CacheKey.taxAmount);
  }

  public java.lang.Long getTaxAmountCollected() {
    return genClient.cacheGet(CacheKey.taxAmountCollected);
  }

  public java.lang.Long getServiceChargeAmount() {
    return genClient.cacheGet(CacheKey.serviceChargeAmount);
  }

  public java.lang.Long getServiceChargeAmountCollected() {
    return genClient.cacheGet(CacheKey.serviceChargeAmountCollected);
  }

  public java.lang.Long getAdditionalChargeAmount() {
    return genClient.cacheGet(CacheKey.additionalChargeAmount);
  }

  public com.clover.sdk.v3.report.ChargeSummarySection getChargeDetails() {
    return genClient.cacheGet(CacheKey.chargeDetails);
  }

  public java.lang.Long getAmountCollected() {
    return genClient.cacheGet(CacheKey.amountCollected);
  }

  public java.lang.Long getAverageNetSales() {
    return genClient.cacheGet(CacheKey.averageNetSales);
  }

  public java.lang.Long getExchangeAmount() {
    return genClient.cacheGet(CacheKey.exchangeAmount);
  }

  public java.lang.Long getNumExchanges() {
    return genClient.cacheGet(CacheKey.numExchanges);
  }

  /**
   * Number of fully and partially paid orders.
   */
  public java.lang.Long getNumOrders() {
    return genClient.cacheGet(CacheKey.numOrders);
  }

  /**
   * Sum of the number of payments, credits and refunds.
   */
  public java.lang.Long getNumTransactions() {
    return genClient.cacheGet(CacheKey.numTransactions);
  }

  public java.lang.Long getNumPayments() {
    return genClient.cacheGet(CacheKey.numPayments);
  }




  private enum CacheKey implements com.clover.sdk.ExtractionStrategyEnum {
    voids
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numVoids
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    grossSales
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    refundAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    refundAmountTotal
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    paymentAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numRefunds
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    refundRepaymentAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numDiscounts
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    discountAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    net
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    nonRevenueItems
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    giftCardLoads
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    tenderStats
        (com.clover.sdk.extractors.RecordListExtractionStrategy.instance(com.clover.sdk.v3.report.TenderGroupRow.JSON_CREATOR)),
    tipAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    cashTipsCollected
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    tipDetails
        (com.clover.sdk.extractors.RecordListExtractionStrategy.instance(com.clover.sdk.v3.report.Summary.JSON_CREATOR)),
    taxAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    taxAmountCollected
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    serviceChargeAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    serviceChargeAmountCollected
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    additionalChargeAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    chargeDetails
        (com.clover.sdk.extractors.RecordExtractionStrategy.instance(com.clover.sdk.v3.report.ChargeSummarySection.JSON_CREATOR)),
    amountCollected
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    averageNetSales
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    exchangeAmount
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numExchanges
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numOrders
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numTransactions
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
    numPayments
        (com.clover.sdk.extractors.BasicExtractionStrategy.instance(java.lang.Long.class)),
      ;

    private final com.clover.sdk.extractors.ExtractionStrategy extractionStrategy;

    private CacheKey(com.clover.sdk.extractors.ExtractionStrategy s) {
      extractionStrategy = s;
    }

    @Override
    public com.clover.sdk.extractors.ExtractionStrategy getExtractionStrategy() {
      return extractionStrategy;
    }
  }

  private final GenericClient<EachEmployeeSummary> genClient;

  /**
   * Constructs a new empty instance.
   */
  public EachEmployeeSummary() {
    genClient = new GenericClient<EachEmployeeSummary>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
   * Constructs a new empty instance.
   */
  protected EachEmployeeSummary(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public EachEmployeeSummary(String json) throws IllegalArgumentException {
    this();
    genClient.initJsonObject(json);
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public EachEmployeeSummary(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public EachEmployeeSummary(EachEmployeeSummary src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'voids' field is set and is not null */
  public boolean isNotNullVoids() {
    return genClient.cacheValueIsNotNull(CacheKey.voids);
  }

  /** Checks whether the 'numVoids' field is set and is not null */
  public boolean isNotNullNumVoids() {
    return genClient.cacheValueIsNotNull(CacheKey.numVoids);
  }

  /** Checks whether the 'grossSales' field is set and is not null */
  public boolean isNotNullGrossSales() {
    return genClient.cacheValueIsNotNull(CacheKey.grossSales);
  }

  /** Checks whether the 'refundAmount' field is set and is not null */
  public boolean isNotNullRefundAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.refundAmount);
  }

  /** Checks whether the 'refundAmountTotal' field is set and is not null */
  public boolean isNotNullRefundAmountTotal() {
    return genClient.cacheValueIsNotNull(CacheKey.refundAmountTotal);
  }

  /** Checks whether the 'paymentAmount' field is set and is not null */
  public boolean isNotNullPaymentAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.paymentAmount);
  }

  /** Checks whether the 'numRefunds' field is set and is not null */
  public boolean isNotNullNumRefunds() {
    return genClient.cacheValueIsNotNull(CacheKey.numRefunds);
  }

  /** Checks whether the 'refundRepaymentAmount' field is set and is not null */
  public boolean isNotNullRefundRepaymentAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.refundRepaymentAmount);
  }

  /** Checks whether the 'numDiscounts' field is set and is not null */
  public boolean isNotNullNumDiscounts() {
    return genClient.cacheValueIsNotNull(CacheKey.numDiscounts);
  }

  /** Checks whether the 'discountAmount' field is set and is not null */
  public boolean isNotNullDiscountAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.discountAmount);
  }

  /** Checks whether the 'net' field is set and is not null */
  public boolean isNotNullNet() {
    return genClient.cacheValueIsNotNull(CacheKey.net);
  }

  /** Checks whether the 'nonRevenueItems' field is set and is not null */
  public boolean isNotNullNonRevenueItems() {
    return genClient.cacheValueIsNotNull(CacheKey.nonRevenueItems);
  }

  /** Checks whether the 'giftCardLoads' field is set and is not null */
  public boolean isNotNullGiftCardLoads() {
    return genClient.cacheValueIsNotNull(CacheKey.giftCardLoads);
  }

  /** Checks whether the 'tenderStats' field is set and is not null */
  public boolean isNotNullTenderStats() {
    return genClient.cacheValueIsNotNull(CacheKey.tenderStats);
  }

  /** Checks whether the 'tenderStats' field is set and is not null and is not empty */
  public boolean isNotEmptyTenderStats() { return isNotNullTenderStats() && !getTenderStats().isEmpty(); }

  /** Checks whether the 'tipAmount' field is set and is not null */
  public boolean isNotNullTipAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.tipAmount);
  }

  /** Checks whether the 'cashTipsCollected' field is set and is not null */
  public boolean isNotNullCashTipsCollected() {
    return genClient.cacheValueIsNotNull(CacheKey.cashTipsCollected);
  }

  /** Checks whether the 'tipDetails' field is set and is not null */
  public boolean isNotNullTipDetails() {
    return genClient.cacheValueIsNotNull(CacheKey.tipDetails);
  }

  /** Checks whether the 'tipDetails' field is set and is not null and is not empty */
  public boolean isNotEmptyTipDetails() { return isNotNullTipDetails() && !getTipDetails().isEmpty(); }

  /** Checks whether the 'taxAmount' field is set and is not null */
  public boolean isNotNullTaxAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.taxAmount);
  }

  /** Checks whether the 'taxAmountCollected' field is set and is not null */
  public boolean isNotNullTaxAmountCollected() {
    return genClient.cacheValueIsNotNull(CacheKey.taxAmountCollected);
  }

  /** Checks whether the 'serviceChargeAmount' field is set and is not null */
  public boolean isNotNullServiceChargeAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'serviceChargeAmountCollected' field is set and is not null */
  public boolean isNotNullServiceChargeAmountCollected() {
    return genClient.cacheValueIsNotNull(CacheKey.serviceChargeAmountCollected);
  }

  /** Checks whether the 'additionalChargeAmount' field is set and is not null */
  public boolean isNotNullAdditionalChargeAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.additionalChargeAmount);
  }

  /** Checks whether the 'chargeDetails' field is set and is not null */
  public boolean isNotNullChargeDetails() {
    return genClient.cacheValueIsNotNull(CacheKey.chargeDetails);
  }

  /** Checks whether the 'amountCollected' field is set and is not null */
  public boolean isNotNullAmountCollected() {
    return genClient.cacheValueIsNotNull(CacheKey.amountCollected);
  }

  /** Checks whether the 'averageNetSales' field is set and is not null */
  public boolean isNotNullAverageNetSales() {
    return genClient.cacheValueIsNotNull(CacheKey.averageNetSales);
  }

  /** Checks whether the 'exchangeAmount' field is set and is not null */
  public boolean isNotNullExchangeAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.exchangeAmount);
  }

  /** Checks whether the 'numExchanges' field is set and is not null */
  public boolean isNotNullNumExchanges() {
    return genClient.cacheValueIsNotNull(CacheKey.numExchanges);
  }

  /** Checks whether the 'numOrders' field is set and is not null */
  public boolean isNotNullNumOrders() {
    return genClient.cacheValueIsNotNull(CacheKey.numOrders);
  }

  /** Checks whether the 'numTransactions' field is set and is not null */
  public boolean isNotNullNumTransactions() {
    return genClient.cacheValueIsNotNull(CacheKey.numTransactions);
  }

  /** Checks whether the 'numPayments' field is set and is not null */
  public boolean isNotNullNumPayments() {
    return genClient.cacheValueIsNotNull(CacheKey.numPayments);
  }



  /** Checks whether the 'voids' field has been set, however the value could be null */
  public boolean hasVoids() {
    return genClient.cacheHasKey(CacheKey.voids);
  }

  /** Checks whether the 'numVoids' field has been set, however the value could be null */
  public boolean hasNumVoids() {
    return genClient.cacheHasKey(CacheKey.numVoids);
  }

  /** Checks whether the 'grossSales' field has been set, however the value could be null */
  public boolean hasGrossSales() {
    return genClient.cacheHasKey(CacheKey.grossSales);
  }

  /** Checks whether the 'refundAmount' field has been set, however the value could be null */
  public boolean hasRefundAmount() {
    return genClient.cacheHasKey(CacheKey.refundAmount);
  }

  /** Checks whether the 'refundAmountTotal' field has been set, however the value could be null */
  public boolean hasRefundAmountTotal() {
    return genClient.cacheHasKey(CacheKey.refundAmountTotal);
  }

  /** Checks whether the 'paymentAmount' field has been set, however the value could be null */
  public boolean hasPaymentAmount() {
    return genClient.cacheHasKey(CacheKey.paymentAmount);
  }

  /** Checks whether the 'numRefunds' field has been set, however the value could be null */
  public boolean hasNumRefunds() {
    return genClient.cacheHasKey(CacheKey.numRefunds);
  }

  /** Checks whether the 'refundRepaymentAmount' field has been set, however the value could be null */
  public boolean hasRefundRepaymentAmount() {
    return genClient.cacheHasKey(CacheKey.refundRepaymentAmount);
  }

  /** Checks whether the 'numDiscounts' field has been set, however the value could be null */
  public boolean hasNumDiscounts() {
    return genClient.cacheHasKey(CacheKey.numDiscounts);
  }

  /** Checks whether the 'discountAmount' field has been set, however the value could be null */
  public boolean hasDiscountAmount() {
    return genClient.cacheHasKey(CacheKey.discountAmount);
  }

  /** Checks whether the 'net' field has been set, however the value could be null */
  public boolean hasNet() {
    return genClient.cacheHasKey(CacheKey.net);
  }

  /** Checks whether the 'nonRevenueItems' field has been set, however the value could be null */
  public boolean hasNonRevenueItems() {
    return genClient.cacheHasKey(CacheKey.nonRevenueItems);
  }

  /** Checks whether the 'giftCardLoads' field has been set, however the value could be null */
  public boolean hasGiftCardLoads() {
    return genClient.cacheHasKey(CacheKey.giftCardLoads);
  }

  /** Checks whether the 'tenderStats' field has been set, however the value could be null */
  public boolean hasTenderStats() {
    return genClient.cacheHasKey(CacheKey.tenderStats);
  }

  /** Checks whether the 'tipAmount' field has been set, however the value could be null */
  public boolean hasTipAmount() {
    return genClient.cacheHasKey(CacheKey.tipAmount);
  }

  /** Checks whether the 'cashTipsCollected' field has been set, however the value could be null */
  public boolean hasCashTipsCollected() {
    return genClient.cacheHasKey(CacheKey.cashTipsCollected);
  }

  /** Checks whether the 'tipDetails' field has been set, however the value could be null */
  public boolean hasTipDetails() {
    return genClient.cacheHasKey(CacheKey.tipDetails);
  }

  /** Checks whether the 'taxAmount' field has been set, however the value could be null */
  public boolean hasTaxAmount() {
    return genClient.cacheHasKey(CacheKey.taxAmount);
  }

  /** Checks whether the 'taxAmountCollected' field has been set, however the value could be null */
  public boolean hasTaxAmountCollected() {
    return genClient.cacheHasKey(CacheKey.taxAmountCollected);
  }

  /** Checks whether the 'serviceChargeAmount' field has been set, however the value could be null */
  public boolean hasServiceChargeAmount() {
    return genClient.cacheHasKey(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'serviceChargeAmountCollected' field has been set, however the value could be null */
  public boolean hasServiceChargeAmountCollected() {
    return genClient.cacheHasKey(CacheKey.serviceChargeAmountCollected);
  }

  /** Checks whether the 'additionalChargeAmount' field has been set, however the value could be null */
  public boolean hasAdditionalChargeAmount() {
    return genClient.cacheHasKey(CacheKey.additionalChargeAmount);
  }

  /** Checks whether the 'chargeDetails' field has been set, however the value could be null */
  public boolean hasChargeDetails() {
    return genClient.cacheHasKey(CacheKey.chargeDetails);
  }

  /** Checks whether the 'amountCollected' field has been set, however the value could be null */
  public boolean hasAmountCollected() {
    return genClient.cacheHasKey(CacheKey.amountCollected);
  }

  /** Checks whether the 'averageNetSales' field has been set, however the value could be null */
  public boolean hasAverageNetSales() {
    return genClient.cacheHasKey(CacheKey.averageNetSales);
  }

  /** Checks whether the 'exchangeAmount' field has been set, however the value could be null */
  public boolean hasExchangeAmount() {
    return genClient.cacheHasKey(CacheKey.exchangeAmount);
  }

  /** Checks whether the 'numExchanges' field has been set, however the value could be null */
  public boolean hasNumExchanges() {
    return genClient.cacheHasKey(CacheKey.numExchanges);
  }

  /** Checks whether the 'numOrders' field has been set, however the value could be null */
  public boolean hasNumOrders() {
    return genClient.cacheHasKey(CacheKey.numOrders);
  }

  /** Checks whether the 'numTransactions' field has been set, however the value could be null */
  public boolean hasNumTransactions() {
    return genClient.cacheHasKey(CacheKey.numTransactions);
  }

  /** Checks whether the 'numPayments' field has been set, however the value could be null */
  public boolean hasNumPayments() {
    return genClient.cacheHasKey(CacheKey.numPayments);
  }


  /**
   * Sets the field 'voids'.
   */
  public EachEmployeeSummary setVoids(java.lang.Long voids) {
    return genClient.setOther(voids, CacheKey.voids);
  }

  /**
   * Sets the field 'numVoids'.
   */
  public EachEmployeeSummary setNumVoids(java.lang.Long numVoids) {
    return genClient.setOther(numVoids, CacheKey.numVoids);
  }

  /**
   * Sets the field 'grossSales'.
   */
  public EachEmployeeSummary setGrossSales(java.lang.Long grossSales) {
    return genClient.setOther(grossSales, CacheKey.grossSales);
  }

  /**
   * Sets the field 'refundAmount'.
   */
  public EachEmployeeSummary setRefundAmount(java.lang.Long refundAmount) {
    return genClient.setOther(refundAmount, CacheKey.refundAmount);
  }

  /**
   * Sets the field 'refundAmountTotal'.
   */
  public EachEmployeeSummary setRefundAmountTotal(java.lang.Long refundAmountTotal) {
    return genClient.setOther(refundAmountTotal, CacheKey.refundAmountTotal);
  }

  /**
   * Sets the field 'paymentAmount'.
   */
  public EachEmployeeSummary setPaymentAmount(java.lang.Long paymentAmount) {
    return genClient.setOther(paymentAmount, CacheKey.paymentAmount);
  }

  /**
   * Sets the field 'numRefunds'.
   */
  public EachEmployeeSummary setNumRefunds(java.lang.Long numRefunds) {
    return genClient.setOther(numRefunds, CacheKey.numRefunds);
  }

  /**
   * Sets the field 'refundRepaymentAmount'.
   */
  public EachEmployeeSummary setRefundRepaymentAmount(java.lang.Long refundRepaymentAmount) {
    return genClient.setOther(refundRepaymentAmount, CacheKey.refundRepaymentAmount);
  }

  /**
   * Sets the field 'numDiscounts'.
   */
  public EachEmployeeSummary setNumDiscounts(java.lang.Long numDiscounts) {
    return genClient.setOther(numDiscounts, CacheKey.numDiscounts);
  }

  /**
   * Sets the field 'discountAmount'.
   */
  public EachEmployeeSummary setDiscountAmount(java.lang.Long discountAmount) {
    return genClient.setOther(discountAmount, CacheKey.discountAmount);
  }

  /**
   * Sets the field 'net'.
   */
  public EachEmployeeSummary setNet(java.lang.Long net) {
    return genClient.setOther(net, CacheKey.net);
  }

  /**
   * Sets the field 'nonRevenueItems'.
   */
  public EachEmployeeSummary setNonRevenueItems(java.lang.Long nonRevenueItems) {
    return genClient.setOther(nonRevenueItems, CacheKey.nonRevenueItems);
  }

  /**
   * Sets the field 'giftCardLoads'.
   */
  public EachEmployeeSummary setGiftCardLoads(java.lang.Long giftCardLoads) {
    return genClient.setOther(giftCardLoads, CacheKey.giftCardLoads);
  }

  /**
   * Sets the field 'tenderStats'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public EachEmployeeSummary setTenderStats(java.util.List<com.clover.sdk.v3.report.TenderGroupRow> tenderStats) {
    return genClient.setArrayRecord(tenderStats, CacheKey.tenderStats);
  }

  /**
   * Sets the field 'tipAmount'.
   */
  public EachEmployeeSummary setTipAmount(java.lang.Long tipAmount) {
    return genClient.setOther(tipAmount, CacheKey.tipAmount);
  }

  /**
   * Sets the field 'cashTipsCollected'.
   */
  public EachEmployeeSummary setCashTipsCollected(java.lang.Long cashTipsCollected) {
    return genClient.setOther(cashTipsCollected, CacheKey.cashTipsCollected);
  }

  /**
   * Sets the field 'tipDetails'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public EachEmployeeSummary setTipDetails(java.util.List<com.clover.sdk.v3.report.Summary> tipDetails) {
    return genClient.setArrayRecord(tipDetails, CacheKey.tipDetails);
  }

  /**
   * Sets the field 'taxAmount'.
   */
  public EachEmployeeSummary setTaxAmount(java.lang.Long taxAmount) {
    return genClient.setOther(taxAmount, CacheKey.taxAmount);
  }

  /**
   * Sets the field 'taxAmountCollected'.
   */
  public EachEmployeeSummary setTaxAmountCollected(java.lang.Long taxAmountCollected) {
    return genClient.setOther(taxAmountCollected, CacheKey.taxAmountCollected);
  }

  /**
   * Sets the field 'serviceChargeAmount'.
   */
  public EachEmployeeSummary setServiceChargeAmount(java.lang.Long serviceChargeAmount) {
    return genClient.setOther(serviceChargeAmount, CacheKey.serviceChargeAmount);
  }

  /**
   * Sets the field 'serviceChargeAmountCollected'.
   */
  public EachEmployeeSummary setServiceChargeAmountCollected(java.lang.Long serviceChargeAmountCollected) {
    return genClient.setOther(serviceChargeAmountCollected, CacheKey.serviceChargeAmountCollected);
  }

  /**
   * Sets the field 'additionalChargeAmount'.
   */
  public EachEmployeeSummary setAdditionalChargeAmount(java.lang.Long additionalChargeAmount) {
    return genClient.setOther(additionalChargeAmount, CacheKey.additionalChargeAmount);
  }

  /**
   * Sets the field 'chargeDetails'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public EachEmployeeSummary setChargeDetails(com.clover.sdk.v3.report.ChargeSummarySection chargeDetails) {
    return genClient.setRecord(chargeDetails, CacheKey.chargeDetails);
  }

  /**
   * Sets the field 'amountCollected'.
   */
  public EachEmployeeSummary setAmountCollected(java.lang.Long amountCollected) {
    return genClient.setOther(amountCollected, CacheKey.amountCollected);
  }

  /**
   * Sets the field 'averageNetSales'.
   */
  public EachEmployeeSummary setAverageNetSales(java.lang.Long averageNetSales) {
    return genClient.setOther(averageNetSales, CacheKey.averageNetSales);
  }

  /**
   * Sets the field 'exchangeAmount'.
   */
  public EachEmployeeSummary setExchangeAmount(java.lang.Long exchangeAmount) {
    return genClient.setOther(exchangeAmount, CacheKey.exchangeAmount);
  }

  /**
   * Sets the field 'numExchanges'.
   */
  public EachEmployeeSummary setNumExchanges(java.lang.Long numExchanges) {
    return genClient.setOther(numExchanges, CacheKey.numExchanges);
  }

  /**
   * Sets the field 'numOrders'.
   */
  public EachEmployeeSummary setNumOrders(java.lang.Long numOrders) {
    return genClient.setOther(numOrders, CacheKey.numOrders);
  }

  /**
   * Sets the field 'numTransactions'.
   */
  public EachEmployeeSummary setNumTransactions(java.lang.Long numTransactions) {
    return genClient.setOther(numTransactions, CacheKey.numTransactions);
  }

  /**
   * Sets the field 'numPayments'.
   */
  public EachEmployeeSummary setNumPayments(java.lang.Long numPayments) {
    return genClient.setOther(numPayments, CacheKey.numPayments);
  }


  /** Clears the 'voids' field, the 'has' method for this field will now return false */
  public void clearVoids() {
    genClient.clear(CacheKey.voids);
  }
  /** Clears the 'numVoids' field, the 'has' method for this field will now return false */
  public void clearNumVoids() {
    genClient.clear(CacheKey.numVoids);
  }
  /** Clears the 'grossSales' field, the 'has' method for this field will now return false */
  public void clearGrossSales() {
    genClient.clear(CacheKey.grossSales);
  }
  /** Clears the 'refundAmount' field, the 'has' method for this field will now return false */
  public void clearRefundAmount() {
    genClient.clear(CacheKey.refundAmount);
  }
  /** Clears the 'refundAmountTotal' field, the 'has' method for this field will now return false */
  public void clearRefundAmountTotal() {
    genClient.clear(CacheKey.refundAmountTotal);
  }
  /** Clears the 'paymentAmount' field, the 'has' method for this field will now return false */
  public void clearPaymentAmount() {
    genClient.clear(CacheKey.paymentAmount);
  }
  /** Clears the 'numRefunds' field, the 'has' method for this field will now return false */
  public void clearNumRefunds() {
    genClient.clear(CacheKey.numRefunds);
  }
  /** Clears the 'refundRepaymentAmount' field, the 'has' method for this field will now return false */
  public void clearRefundRepaymentAmount() {
    genClient.clear(CacheKey.refundRepaymentAmount);
  }
  /** Clears the 'numDiscounts' field, the 'has' method for this field will now return false */
  public void clearNumDiscounts() {
    genClient.clear(CacheKey.numDiscounts);
  }
  /** Clears the 'discountAmount' field, the 'has' method for this field will now return false */
  public void clearDiscountAmount() {
    genClient.clear(CacheKey.discountAmount);
  }
  /** Clears the 'net' field, the 'has' method for this field will now return false */
  public void clearNet() {
    genClient.clear(CacheKey.net);
  }
  /** Clears the 'nonRevenueItems' field, the 'has' method for this field will now return false */
  public void clearNonRevenueItems() {
    genClient.clear(CacheKey.nonRevenueItems);
  }
  /** Clears the 'giftCardLoads' field, the 'has' method for this field will now return false */
  public void clearGiftCardLoads() {
    genClient.clear(CacheKey.giftCardLoads);
  }
  /** Clears the 'tenderStats' field, the 'has' method for this field will now return false */
  public void clearTenderStats() {
    genClient.clear(CacheKey.tenderStats);
  }
  /** Clears the 'tipAmount' field, the 'has' method for this field will now return false */
  public void clearTipAmount() {
    genClient.clear(CacheKey.tipAmount);
  }
  /** Clears the 'cashTipsCollected' field, the 'has' method for this field will now return false */
  public void clearCashTipsCollected() {
    genClient.clear(CacheKey.cashTipsCollected);
  }
  /** Clears the 'tipDetails' field, the 'has' method for this field will now return false */
  public void clearTipDetails() {
    genClient.clear(CacheKey.tipDetails);
  }
  /** Clears the 'taxAmount' field, the 'has' method for this field will now return false */
  public void clearTaxAmount() {
    genClient.clear(CacheKey.taxAmount);
  }
  /** Clears the 'taxAmountCollected' field, the 'has' method for this field will now return false */
  public void clearTaxAmountCollected() {
    genClient.clear(CacheKey.taxAmountCollected);
  }
  /** Clears the 'serviceChargeAmount' field, the 'has' method for this field will now return false */
  public void clearServiceChargeAmount() {
    genClient.clear(CacheKey.serviceChargeAmount);
  }
  /** Clears the 'serviceChargeAmountCollected' field, the 'has' method for this field will now return false */
  public void clearServiceChargeAmountCollected() {
    genClient.clear(CacheKey.serviceChargeAmountCollected);
  }
  /** Clears the 'additionalChargeAmount' field, the 'has' method for this field will now return false */
  public void clearAdditionalChargeAmount() {
    genClient.clear(CacheKey.additionalChargeAmount);
  }
  /** Clears the 'chargeDetails' field, the 'has' method for this field will now return false */
  public void clearChargeDetails() {
    genClient.clear(CacheKey.chargeDetails);
  }
  /** Clears the 'amountCollected' field, the 'has' method for this field will now return false */
  public void clearAmountCollected() {
    genClient.clear(CacheKey.amountCollected);
  }
  /** Clears the 'averageNetSales' field, the 'has' method for this field will now return false */
  public void clearAverageNetSales() {
    genClient.clear(CacheKey.averageNetSales);
  }
  /** Clears the 'exchangeAmount' field, the 'has' method for this field will now return false */
  public void clearExchangeAmount() {
    genClient.clear(CacheKey.exchangeAmount);
  }
  /** Clears the 'numExchanges' field, the 'has' method for this field will now return false */
  public void clearNumExchanges() {
    genClient.clear(CacheKey.numExchanges);
  }
  /** Clears the 'numOrders' field, the 'has' method for this field will now return false */
  public void clearNumOrders() {
    genClient.clear(CacheKey.numOrders);
  }
  /** Clears the 'numTransactions' field, the 'has' method for this field will now return false */
  public void clearNumTransactions() {
    genClient.clear(CacheKey.numTransactions);
  }
  /** Clears the 'numPayments' field, the 'has' method for this field will now return false */
  public void clearNumPayments() {
    genClient.clear(CacheKey.numPayments);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public EachEmployeeSummary copyChanges() {
    EachEmployeeSummary copy = new EachEmployeeSummary();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(EachEmployeeSummary src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new EachEmployeeSummary(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<EachEmployeeSummary> CREATOR = new android.os.Parcelable.Creator<EachEmployeeSummary>() {
    @Override
    public EachEmployeeSummary createFromParcel(android.os.Parcel in) {
      EachEmployeeSummary instance = new EachEmployeeSummary(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public EachEmployeeSummary[] newArray(int size) {
      return new EachEmployeeSummary[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<EachEmployeeSummary> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<EachEmployeeSummary>() {
    public Class<EachEmployeeSummary> getCreatedClass() {
      return EachEmployeeSummary.class;
    }

    @Override
    public EachEmployeeSummary create(org.json.JSONObject jsonObject) {
      return new EachEmployeeSummary(jsonObject);
    }
  };

  public interface Constraints {
    public static final boolean VOIDS_IS_REQUIRED = false;
    public static final boolean NUMVOIDS_IS_REQUIRED = false;
    public static final boolean GROSSSALES_IS_REQUIRED = false;
    public static final boolean REFUNDAMOUNT_IS_REQUIRED = false;
    public static final boolean REFUNDAMOUNTTOTAL_IS_REQUIRED = false;
    public static final boolean PAYMENTAMOUNT_IS_REQUIRED = false;
    public static final boolean NUMREFUNDS_IS_REQUIRED = false;
    public static final boolean REFUNDREPAYMENTAMOUNT_IS_REQUIRED = false;
    public static final boolean NUMDISCOUNTS_IS_REQUIRED = false;
    public static final boolean DISCOUNTAMOUNT_IS_REQUIRED = false;
    public static final boolean NET_IS_REQUIRED = false;
    public static final boolean NONREVENUEITEMS_IS_REQUIRED = false;
    public static final boolean GIFTCARDLOADS_IS_REQUIRED = false;
    public static final boolean TENDERSTATS_IS_REQUIRED = false;
    public static final boolean TIPAMOUNT_IS_REQUIRED = false;
    public static final boolean CASHTIPSCOLLECTED_IS_REQUIRED = false;
    public static final boolean TIPDETAILS_IS_REQUIRED = false;
    public static final boolean TAXAMOUNT_IS_REQUIRED = false;
    public static final boolean TAXAMOUNTCOLLECTED_IS_REQUIRED = false;
    public static final boolean SERVICECHARGEAMOUNT_IS_REQUIRED = false;
    public static final boolean SERVICECHARGEAMOUNTCOLLECTED_IS_REQUIRED = false;
    public static final boolean ADDITIONALCHARGEAMOUNT_IS_REQUIRED = false;
    public static final boolean CHARGEDETAILS_IS_REQUIRED = false;
    public static final boolean AMOUNTCOLLECTED_IS_REQUIRED = false;
    public static final boolean AVERAGENETSALES_IS_REQUIRED = false;
    public static final boolean EXCHANGEAMOUNT_IS_REQUIRED = false;
    public static final boolean NUMEXCHANGES_IS_REQUIRED = false;
    public static final boolean NUMORDERS_IS_REQUIRED = false;
    public static final boolean NUMTRANSACTIONS_IS_REQUIRED = false;
    public static final boolean NUMPAYMENTS_IS_REQUIRED = false;
  }

}
